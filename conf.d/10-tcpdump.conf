## parse tcpdump messages
filter {
  if [type] == "tcpdump" {
	grok {
		match => { "message" => [ 
					"%{TIMESTAMP_ISO8601:timestamp} IP %{IP:srcIP}.%{INT:srcPort} > %{IP:dstIP}.%{INT:dstPort}:%{GREEDYDATA:data}",
					"%{TIMESTAMP_ISO8601} ARP, Request who-has %{IP:rtrIP} tell %{IP:usrIP}, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} ARP, Reply %{IP:rtrIP} is-at %{MAC}, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} ARP, Request who-has %{IP:rtrIP} \(%{MAC}\) tell %{IP:usrIP}, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} IP %{IP:dstIP} \> %{IP:srcIP}: ICMP echo request, id %{NUMBER:icmpID}, seq %{NUMBER:seqID}, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} IP %{IP:dstIP} \> %{IP:srcIP}: ICMP echo reply, id %{NUMBER:icmpID}, seq %{NUMBER:seqID}, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} IP %{IP:dstIP} \> %{IP:srcIP}: ICMP %{IP:dstIP} udp port %{NUMBER:dstPort} unreachable, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} IP %{IP:dstIP} \> %{IP:srcIP}: %{GREEDYDATA:msg} %{IP:srcIP}",
					"%{TIMESTAMP_ISO8601} IP %{IP:dstIP} \> %{IP:srcIP}: %{GREEDYDATA:msg}",
					"%{TIMESTAMP_ISO8601} IP6 %{IPV6:dstIP}.%{NUMBER:port} \> %{IPV6:maskIP}.%{NUMBER:maskPort}: %{GREEDYDATA}\(%{NUMBER:pid}\)",
					"%{TIMESTAMP_ISO8601} IP6 %{IPV6:dstIP} \> %{IPV6:maskIP}: ICMP6, %{GREEDYDATA:msg}, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} IP6 %{IPV6:dstIP} \> %{IPV6:maskIP}: HBH ICMP6, %{GREEDYDATA:msg}, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} EAPOL key \(%{NUMBER:key}\) v%{NUMBER:version}, len %{NUMBER:len}" 
					] 
			}
		named_captures_only => true
	#	remove_field => [ "command", "host", "@version", "message", "@timestamp"]
	}

    }
}
## get geoip from srcIP
filter {
geoip {
      #source => "dstIP"
      source => "srcIP"
      target => "geoip"
    }
}
## get geoip from destIP on callback connections
filter {
   if "_geoip_lookup_failure" in [tags] {
      geoip {
        source => "dstIP"
        #source => "srcIP"
        target => "geoip"
      }
     mutate {
        remove_tag => [ "_geoip_lookup_failure" ]
     }
   }
}
## get dns name from geoip.ip
filter {
   dns {
      reverse => ["srcIP","dstIP"]
      action => "replace"
   }
}
#filter {
# if "_grokparsefailure" in [tags] {
#	drop {}
# }
#}
#filter {
# if "_geoip_lookup_failure" in [tags] {
#	drop {}
# }
#}

