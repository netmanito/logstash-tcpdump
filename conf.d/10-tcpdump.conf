## parse tcpdump messages
filter {
  if [type] == "tcpdump" {
	grok {
		match => { "message" => [ 
					"%{TIMESTAMP_ISO8601:timestamp} IP %{IP:client.ip}.%{INT:client.port} > %{IP:destination.ip}.%{INT:destination.port}:%{GREEDYDATA:data}",
					"%{TIMESTAMP_ISO8601} ARP, Request who-has %{IP:source.ip} tell %{IP:client.ip}, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} ARP, Reply %{IP:source.ip} is-at %{MAC:client.mac}, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} ARP, Request who-has %{IP:source.ip} \(%{MAC:client.mac}\) tell %{IP:client.ip}, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} IP %{IP:destination.ip} \> %{IP:client.ip}: ICMP echo request, id %{NUMBER:icmpID}, seq %{NUMBER:seqID}, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} IP %{IP:destination.ip} \> %{IP:client.ip}: ICMP echo reply, id %{NUMBER:icmpID}, seq %{NUMBER:seqID}, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} IP %{IP:destination.ip} \> %{IP:client.ip}: ICMP %{IP:destination.ip} udp port %{NUMBER:destination.port} unreachable, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} IP %{IP:destination.ip} \> %{IP:client.ip}: %{GREEDYDATA:msg} %{IP:client.ip}",
					"%{TIMESTAMP_ISO8601} IP %{IP:destination.ip} \> %{IP:client.ip}: %{GREEDYDATA:msg}",
					"%{TIMESTAMP_ISO8601} IP6 %{IPV6:destination.ip}.%{NUMBER:port} \> %{IPV6:source.ip}.%{NUMBER:source.port}: %{GREEDYDATA:msg}\(%{NUMBER:pid}\)",
					"%{TIMESTAMP_ISO8601} IP6 %{IPV6:destination.ip} \> %{IPV6:source.ip}: ICMP6, %{GREEDYDATA:msg}, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} IP6 %{IPV6:destination.ip} \> %{IPV6:source.ip}: HBH ICMP6, %{GREEDYDATA:msg}, length %{NUMBER:length}",
					"%{TIMESTAMP_ISO8601} EAPOL key \(%{NUMBER:key}\) v%{NUMBER:version}, len %{NUMBER:len}" 
					] 
			}
		named_captures_only => true
	#	remove_field => [ "command", "host", "@version", "message", "@timestamp"]
	}

    }
}
## get geoip from client.ip
filter {
geoip {
      source => "client.ip"
      target => "client.geo"
    }
}
## get geoip from destIP on callback connections
filter {
   if "_geoip_lookup_failure" in [tags] {
      geoip {
        source => "destination.ip"
        #source => "client.ip"
        target => "geoip"
      }
     mutate {
        remove_tag => [ "_geoip_lookup_failure" ]
     }
   }
}
## get dns name from geoip.ip
filter {
   dns {
      reverse => ["client.ip","destination.ip"]
      action => "replace"
   }
}
#filter {
# if "_grokparsefailure" in [tags] {
#	drop {}
# }
#}
#filter {
# if "_geoip_lookup_failure" in [tags] {
#	drop {}
# }
#}

